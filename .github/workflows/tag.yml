name: On new tag workflow - Deploy to app stores

on:
  push:
    tags:
      - '*'

jobs:
  build-android-release:
    if: github.event.ref_type == 'tag'
    runs-on: ubuntu-latest
    container:
      image: tavoargento/react-native-android-ci:0.0.1
    env:
      STORE_FILE: ${{ secrets.STORE_FILE }}
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      STORE_ALIAS: ${{ secrets.STORE_ALIAS }}
      STORE_KEY_PASSWORD: ${{ secrets.STORE_KEY_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: yarn install

      - name: Install Gems
        run: bundle install

      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_PROD_JSON }}" | base64 -d > ./android/app/src/production/google-services.json

      - name: Decode .env.prod file
        run: echo "${{ secrets.ENV_PROD }}" | base64 -d > ./.env.prod

      - name: Decode release key file
        run: echo "${{ secrets.STORE_FILE_CONTENT }}" | base64 -d > ./android/app/release-key.keystore

      - name: Decode Google Play key
        run: echo "${{ secrets.GOOGLE_PLAY_KEY }}" | base64 -d > ./android/google-play-key.json

      - name: Build Android Release App
        run: cd android && ./gradlew bundleProductionRelease

      - name: Distribute to Google Play
        run: |
          cd android
          bundle exec fastlane android deploy_to_play_store

  build-ios-release:
    runs-on: macos-14
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Add firebase services file
        run: |
          cd ios/QDMobile
          mkdir -p firebase/prod
          cd -
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PROD_PLIST }}" | base64 -d > ./ios/QDMobile/firebase/prod/GoogleService-Info.plist
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PROD_PLIST }}" | base64 -d > ./ios/QDMobile/GoogleService-Info.plist

      - name: Select Xcode Version
        run: sudo xcode-select -s /Applications/Xcode_15.3.app

      - name: Install Gems
        run: bundle install

      - name: Install Pods
        run: |
          cd ios
          bundle exec pod install

      - name: Decode .env.prod file
        run: |
          echo "${{ secrets.ENV_PROD }}" | base64 -d > ./.env.prod

      - name: Decode AppStore Authentication key
        run: |
          echo "${{ secrets.APPSTORE_AUTH_KEY }}" | base64 -d > ./ios/AuthKey_68JCD4JV8Q.p8

      - name: Build and distribute IPA
        run: |
          cd ios
          bundle exec fastlane ios build_and_distribute_release_app

      - name: Print Fastlane log file
        if: failure() # This ensures the log is only printed if the previous step fails
        run: |
          grep -i -B 2 -A 4 "error:" /Users/runner/Library/Logs/gym/QDMobile-QDMobile.log || true
